1.	Уязвимости XSS:  перед отправкой данных в базу данных, экранировала все вводимые пользователем значения с помощью функции htmlspecialchars(), например
      $values = [
        'name' => htmlspecialchars($row['name']),
        'phone' => htmlspecialchars($row['phone']),
        …
        'ok' => htmlspecialchars($row['ok']),
           ];

2.	Information Disclosure: 
1) Хранение в базе данных только хэшированных пароли
2) Замена отображения конфиденциальной информации (например, номеров телефона, адреса, паролей) — неинформативными значениями (звездочками, многоточиями, и т.д.).
3) Данные для подключения к базе находятся в db.php, он прописывается в .gitignore. Следовательно, данные не высвечиваются в репозитории.
include('../db.php');
global $db;
$db = new PDO('mysql:host=localhost;dbname=' . $db_name, $db_login, $db_pass,
  [PDO::ATTR_PERSISTENT => true, PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]);

3.	SQL Injection:
Экранирование данных, например 
              $login = mysql_real_escape_string($_POST['login'], $conn);
              $password = mysql_real_escape_string($_POST['password'], $conn);
              $query = "SELECT * FROM users WHERE login ='$login' AND  password='$password'"; 

4.	CSRF:
1)	Использование метода POST – с методом GET CSRF атаки случаются чаще
2)	Использование токена CSRF

5.	Include:
1)	Вместо include и require использовала безопасные аналоги, которые проверяют путь к файлу перед включением:
require_once('database.php'); //или include_once

6.	Upload:
1) Ограничение загрузки файлов только допустимыми типами: mime_content_type()
2) Проверка размера файла
3) Проверка содержимого файла
